<!DOCTYPE html>
<html>

<head>
    <title>Focused Map</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="./js/leaflet/leaflet.css" />
    <link rel="stylesheet" href="./styles/markers.css"/>
    <script src="./js/leaflet/leaflet.js"></script>
    <script src="./js/esri-leaflet/esri-leaflet.js"></script>    
</head>

<body>
    <div id="mapid" style="width: 800px; height: 600px;"></div>
    <script>
        /*function getUrlVars(){
            var vars = {};
            var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {
            vars[key] = value;
            });
            return vars;  
        }*/
        /* variables filled in by the calling process
        */

        var treeList = {{{treeMarkers}}};

        const treeGeneralFundURL = 'https://gis.visualizedot.com/arcgis/rest/services/Trees/Trees/FeatureServer/2';

        const map = L.map('mapid', {
            center: [37.363641, -121.874038],  // center at 1404 Mabury Rd
            zoom: 21,
            attributionControl: false,
            zoomControl: true
        });

        L.esri.basemapLayer('Topographic').addTo(map);

        let selectedTreeIcon = L.icon({
            iconUrl: 'http://i.imgur.com/hct8OpJ.png',
            iconSize: [27,27]
        });

        var standardDivIcon = L.divIcon({className: 'dot-green'});
        
        // Present the general tree layer
        var treeGFLayer = L.esri.featureLayer({
            url: treeGeneralFundURL,
            minZoom: 19,
            maxZoom: 21,
            pointToLayer: function(geojson, latlng){
                return L.marker(latlng, {
                    icon: standardDivIcon
                });
            }
        }).addTo(map);

        var strQuery = '';
        var tw = {};  // save the work type as an associative array so you can refer to it by id. For the popups
        treeList.treeWork.forEach((tree) => {
            strQuery += ' OBJECTID=' + tree.treeId + ' or';
            strQuery += " FACILITYID='" + tree.treeId + "' or";
            tw[tree.treeId] = tree.workDesc;
        });
        strQuery = strQuery.substring(0, strQuery.length -3);
        var query = L.esri.query({ url: treeGeneralFundURL});
        query.where(strQuery);      
        query.run(function(error, featureCollection, response){
            
            if(error){ 
                console.log(error);
                return;
            }
            
            // Add markers of features found in the query
            // Popups are based on info passed in as parameter, not from the featurelayer
            featureCollection.features.forEach((tree) => {                
                L.marker(
                    [tree.geometry.coordinates[1], tree.geometry.coordinates[0]], 
                    {icon: selectedTreeIcon}
                ).addTo(map)
                .bindPopup(tw[tree.properties.OBJECTID],{autoClose: false}).openPopup();                
            });

            // Zoom to the features found
            var geojson = L.geoJSON(featureCollection);
            map.fitBounds(geojson.getBounds());
            
        });
        

        
    </script>
</body >
</html >